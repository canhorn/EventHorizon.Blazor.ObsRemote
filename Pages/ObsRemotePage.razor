@page "/obs-remote"

<h1>OBS Remote</h1>

@if (!IsConnected)
{
    <h2>Connect to OBS</h2>
    <div class="form-group">
        <label for="obsUrl">OBS WebSocket URL</label>
        <input id="obsUrl" class="form-control" @bind-value="Url" placeholder="OBS WebSocket URL" />
    </div>
    <div class="form-group">
        <label for="obsPassword">OBS WebSocket Password (optional)</label>
        <input id="obsPassword" class="form-control" @bind-value="Password" placeholder="OBS WebSocket Password (optional)" />
    </div>
    <div>
        <button class="btn btn-outline-primary" @onclick="HandleStartConnection">Start Connection</button>
    </div>
}
else
{
    <h2>Scenes</h2>
    <div>
        <button class="btn btn-outline-primary" @onclick="HandleGetScenes">Get Scenes</button>
    </div>
    @if (!string.IsNullOrEmpty(CurrentScene))
    {
        <div>Current Scene is "@CurrentScene"</div>
    }
    <hr />
    <div>
        <table class="table table-borderless">
            <tbody>
                @foreach (var scene in Scenes)
                {
                    <tr>
                        <th scope="col">
                            @scene.Name
                            @if (scene.Name == CurrentScene)
                            {
                                <span>(Current Scene)</span>
                            }
                            else
                            {
                                <button class="btn btn-outline-secondary"
                                        @onclick="() => HandleSetToCurrent(scene.Name)">
                                    Activate
                                </button>
                            }
                        </th>
                    </tr>
                }
            </tbody>
        </table>
    </div>
}

@code {
    public bool IsConnected { get; set; } = false;

    protected override void OnInitialized()
    {
        _obs = new OBS.WebSocket.NET.ObsWebSocket();
        _obs.Connected += HandleConnected;
        _obs.SceneChanged += HandleSceneChanged;
    }

    #region Scene Details
    public string CurrentScene { get; set; } = string.Empty;
    public IList<OBS.WebSocket.NET.Types.OBSScene> Scenes { get; set; } = new List<OBS.WebSocket.NET.Types.OBSScene>();

    public void HandleGetScenes()
    {
        var sceneDetails = _obs.Api.GetSceneList();
        CurrentScene = sceneDetails.CurrentScene;
        Scenes = sceneDetails.Scenes;
    }

    public void HandleSetToCurrent(
        string sceneName)
    {
        _obs.Api.SetCurrentScene(sceneName);
    }

    private void HandleSceneChanged(
        OBS.WebSocket.NET.ObsWebSocket _,
        string newSceneName
    )
    {
        CurrentScene = newSceneName;
        InvokeAsync(StateHasChanged);
    }
    #endregion

    #region Start Connection
    public string Url { get; set; } = "ws://localhost:4444";
    public string Password { get; set; } = string.Empty;

    private OBS.WebSocket.NET.ObsWebSocket _obs;

    public void HandleStartConnection()
    {
        _obs.Connect(Url, Password);
    }

    private void HandleConnected(
        object _,
        EventArgs __
    )
    {
        IsConnected = true;
    }
    #endregion
}